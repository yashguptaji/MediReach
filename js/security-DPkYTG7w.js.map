{"version":3,"file":"security-DPkYTG7w.js","sources":["../../src/utils/security.js"],"sourcesContent":["// Security utilities for XSS prevention\nimport DOMPurify from 'dompurify';\n\n/**\n * Sanitizes HTML content to prevent XSS attacks\n * @param {string} html - The HTML content to sanitize\n * @param {Object} options - DOMPurify configuration options\n * @returns {string} - Sanitized HTML\n */\nexport function sanitizeHtml(html, options = {}) {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n\n  const config = {\n    ALLOWED_TAGS: [\n      'div',\n      'span',\n      'p',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'strong',\n      'em',\n      'br',\n      'img',\n      'a'\n    ],\n    ALLOWED_ATTR: ['class', 'id', 'src', 'alt', 'href', 'target', 'title'],\n    ALLOW_DATA_ATTR: false,\n    ...options\n  };\n\n  return DOMPurify.sanitize(html, config);\n}\n\n/**\n * Sanitizes text content (removes all HTML tags)\n * @param {string} text - The text to sanitize\n * @returns {string} - Plain text without HTML\n */\nexport function sanitizeText(text) {\n  if (!text || typeof text !== 'string') {\n    return '';\n  }\n\n  // Strip all HTML tags and decode HTML entities\n  const div = document.createElement('div');\n  div.innerHTML = DOMPurify.sanitize(text, { ALLOWED_TAGS: [] });\n  return div.textContent || div.innerText || '';\n}\n\n/**\n * Creates a safe innerHTML setter that automatically sanitizes content\n * @param {HTMLElement} element - The element to set innerHTML on\n * @param {string} html - The HTML content to set\n * @param {Object} options - DOMPurify configuration options\n */\nexport function setSafeInnerHTML(element, html, options = {}) {\n  if (!element || !html) {\n    return;\n  }\n\n  element.innerHTML = sanitizeHtml(html, options);\n}\n\n/**\n * Make security utilities available globally for legacy code\n */\nif (typeof window !== 'undefined') {\n  window.sanitizeHtml = sanitizeHtml;\n  window.sanitizeText = sanitizeText;\n  window.setSafeInnerHTML = setSafeInnerHTML;\n}\n\nexport default {\n  sanitizeHtml,\n  sanitizeText,\n  setSafeInnerHTML\n};\n"],"names":["sanitizeHtml","html","options","config","ALLOWED_TAGS","ALLOWED_ATTR","ALLOW_DATA_ATTR","DOMPurify","sanitize","sanitizeText","text","div","document","createElement","innerHTML","textContent","innerText","setSafeInnerHTML","element","window"],"mappings":"4CASO,SAASA,EAAaC,EAAMC,EAAU,IAC3C,IAAKD,GAAwB,iBAATA,EAClB,MAAO,GAGT,MAAME,EAAS,CACbC,aAAc,CACZ,MACA,OACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,KACA,KACA,MACA,KAEFC,aAAc,CAAC,QAAS,KAAM,MAAO,MAAO,OAAQ,SAAU,SAC9DC,iBAAiB,KACdJ,GAGL,OAAOK,EAAUC,SAASP,EAAME,EAClC,CAOO,SAASM,EAAaC,GAC3B,IAAKA,GAAwB,iBAATA,EAClB,MAAO,GAIT,MAAMC,EAAMC,SAASC,cAAc,OAEnC,OADAF,EAAIG,UAAYP,EAAUC,SAASE,EAAM,CAAEN,aAAc,KAClDO,EAAII,aAAeJ,EAAIK,WAAa,EAC7C,CAQO,SAASC,EAAiBC,EAASjB,EAAMC,EAAU,CAAA,GACnDgB,GAAYjB,IAIjBiB,EAAQJ,UAAYd,EAAaC,EAAMC,GACzC,CAKsB,oBAAXiB,SACTA,OAAOnB,aAAeA,EACtBmB,OAAOV,aAAeA,EACtBU,OAAOF,iBAAmBA"}